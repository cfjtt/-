一直以来我们都是在对象上实现引用，而对象引用的特点是：不同的对象可以操作同一个内容。而方法的引用
就是为方法设置一个别名，相当于一个方法定义了不同的名字。
	方法引用在java8中一共定义了四种形式:
		1.引用静态方法:类名称 ::static方法名称
		2.引用某个对象的方法: 实例对象 ::普通方法
		3.引用特定类型的方法： 特定类 ::普通方法
		4.引用构造方法: 类名称 ::new
		
	1.引用静态方法
		例如:String里面有一个valueOf()方法
		/**
			实现方法的引用接口
				P:引用方法的参数类型
				R:引用方法的返回类型
		*/
		interface IMessage<P,R>{
			public R change(P p);
		}
		public class TestDemo{
			public static void main(String[] args){
			    //将・String.valueof()方法变成了IMessage接口中的change方法
				IMessage<Integer,String> msg = String :: valueof; 
				String str = msg.change(1000);	
			}
		}
		这样就实现了方法的引用
		
	2.引用某个对象的方法
		interface IMessage(R){
			public R upper();
		}
		public class TestDemo{
			public static void main(String[] args){
			/**
				String类的toUppercase()：public String toUppercase()
				这个方法没有参数。但是又返回值，并且・这个方法一定要在实例化对象的情况下才可以调用
				"hello" 字符串是Stirng类的实例化对象，所以直接调用toUppercase()方法
				将toUppercase()函数引用交给了IMessage接口
			*/
				IMessage<String> msg = "hello" :: toUppercase;
				String str = msg.upper(); //相当于hello.toUpperCase()
				System.out.println(str);
			}
		}
		通过两个代码可以发现，如果要实现函数的引用，那么必须要有接口，但是一定要注意，接口中只存在一个
		方法。
		为了保证被引用的接口只能有一个方法，那么我们需要在接口中
		增加一个注解说明就是@FunctionalInterface,表示此接口为函数式接口，只能定义一个方法。
		
	3.特定类的方法引用
		在进行方法引用的过程里面，还有一个形式的方法引用，这个引用需要特定类的支持。
		例如:类名::方法名。引用的一定是静态方法，但是其实也可以引用普通方法，但是需要特定情况
		比如:public int compareto(String p1,String p2)
			IMessage<String> msg = String :: compareTo();
			System.put.println("A".compareTo("B"));
			
			
	4.构造方法引用
		interface IMessage<C>{
			public C create(String t,double p);
		}
		public Book(String title,double price){
			this.title = title;
			this.price=price;
		}
		public class TestDemo{
			public static void main(String[] aggs){
				IMessage<Book> msg = Book :: new;
				Book book = msg.create("Java开发",20);
				
			}
		}
		
		
	总结:对象的引用是直接使用对象的名字，但是方法引用则是需要一个FunctionalInterface接口。
		